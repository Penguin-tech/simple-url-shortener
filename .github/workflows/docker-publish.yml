name: Build and Push Docker Image with Linting and Security Scanning

on:
  push:
    paths: ['app/**']
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Lint with pylint
        run: |
          pylint app/fast_api_shortener
        continue-on-error: true  # Optional: Continue even if pylint finds errors

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Docker version tag
        id: set_version
        run: |
          # Get the latest tag from the Git repository
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"

          # If no tag is found, default to v0.1.0
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="v0.1.0"
          else
            # Increment the patch version of the tag, e.g., v1.0.1 -> v1.0.2
            NEW_TAG=$(echo $LATEST_TAG | awk -F. -v OFS=. '{$NF++;print}')
          fi

          # Set the new version as an output variable
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/url-shortener:${{ env.NEW_TAG }} .

      - name: Push image to Docker Hub
        run: |
         docker push ${{ secrets.DOCKER_USERNAME }}/url-shortener:${{ env.NEW_TAG }}
         docker push ${{ secrets.DOCKER_USERNAME }}/url-shortener:latest

      - name: Push Git tag
        run: |
          # Push the new version tag back to the repository
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build  # Run the security scan after the image has been built
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.33.0/trivy_0.33.0_Linux-64bit.tar.gz | tar -xzv
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy Docker security scan
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_USERNAME }}/url-shortener:latest
        continue-on-error: true  # Optional: Continue even if Trivy finds vulnerabilities